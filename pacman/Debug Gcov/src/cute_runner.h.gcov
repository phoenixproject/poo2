        -:    0:Source:D:/_BASE/_SISTEMAS/poo2/pacman/cute/cute_runner.h
        -:    0:Graph:Test.gcno
        -:    0:Data:Test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************************
        -:    2: * This file is part of CUTE.
        -:    3: *
        -:    4: * CUTE is free software: you can redistribute it and/or modify
        -:    5: * it under the terms of the GNU Lesser General Public License as published by
        -:    6: * the Free Software Foundation, either version 3 of the License, or
        -:    7: * (at your option) any later version.
        -:    8: *
        -:    9: * CUTE is distributed in the hope that it will be useful,
        -:   10: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12: * GNU Lesser General Public License for more details.
        -:   13: *
        -:   14: * You should have received a copy of the GNU Lesser General Public License
        -:   15: * along with CUTE.  If not, see <http://www.gnu.org/licenses/>.
        -:   16: *
        -:   17: * Copyright 2006 Peter Sommerlad
        -:   18: *
        -:   19: *********************************************************************************/
        -:   20:
        -:   21:#ifndef CUTE_RUNNER_H_
        -:   22:#define CUTE_RUNNER_H_
        -:   23:#include "cute_test.h"
        -:   24:#include "cute_suite.h"
        -:   25:#include "cute_listener.h"
        -:   26:#include "cute_determine_traits.h"
        -:   27:#include <algorithm>
        -:   28:#include <functional>
        -:   29:#include <iterator>
        -:   30:#include <set>
        -:   31:namespace cute {
        -:   32:	namespace runner_aux {
function _ZN4cute10runner_aux13prefixMatcherC1ERKS1_ called 0 returned 0% blocks executed 0%
function _ZN4cute10runner_aux13prefixMatcherD1Ev called 0 returned 0% blocks executed 0%
    #####:   33:	struct prefixMatcher
call    0 never executed
call    1 never executed
        -:   34:	{
function _ZN4cute10runner_aux13prefixMatcherC1ERKSs called 0 returned 0% blocks executed 0%
    #####:   35:		prefixMatcher(std::string const &prefix):prefix(prefix){}
call    0 never executed
function _ZNK4cute10runner_aux13prefixMatcherclERKSs called 0 returned 0% blocks executed 0%
    #####:   36:		bool operator()(std::string const &s) const {
    #####:   37:			size_t found=s.find(prefix);
call    0 never executed
    #####:   38:			return found==0 && (s.size()==prefix.size() || s[prefix.size()]=='#');
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:   39:		}
        -:   40:	private:
        -:   41:		std::string const prefix;
        -:   42:	};
function _ZN4cute10runner_aux12prefixCutterD1Ev called 0 returned 0% blocks executed 0%
    #####:   43:	struct prefixCutter
call    0 never executed
        -:   44:	{
function _ZN4cute10runner_aux12prefixCutterC1ERKSs called 0 returned 0% blocks executed 0%
    #####:   45:		prefixCutter(std::string const &prefix):prefix(prefix){}
call    0 never executed
function _ZNK4cute10runner_aux12prefixCutterclESs called 0 returned 0% blocks executed 0%
    #####:   46:		std::string operator()(std::string s) const {
    #####:   47:			size_t found=s.find(prefix);
call    0 never executed
    #####:   48:			if ( found==0 && s.size()>prefix.size() && s[prefix.size()]=='#'){
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   49:				s = s.substr(prefix.size()+1);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:   50:			} else {
    #####:   51:				s.clear(); // either no match, or no individual test
call    0 never executed
        -:   52:			}
    #####:   53:			return s;
call    0 never executed
        -:   54:		}
        -:   55:	private:
        -:   56:		std::string const prefix;
        -:   57:	};
function _ZN4cute10runner_aux14ArgvTestFilterC1ERKS1_ called 6 returned 100% blocks executed 100%
function _ZN4cute10runner_aux14ArgvTestFilterD1Ev called 7 returned 100% blocks executed 100%
       13:   58:	class ArgvTestFilter
call    0 returned 100%
call    1 returned 100%
        -:   59:	{
        -:   60:	    std::set<std::string> match;
function _ZN4cute10runner_aux14ArgvTestFilter14shouldRunSuiteERKSsRKSt6vectorISsSaISsEE called 1 returned 100% blocks executed 19%
        1:   61:	    bool shouldRunSuite(std::string const &info, std::vector<std::string> const &args)
        -:   62:	    {
        1:   63:	        if(!args.size() || !info.size())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        1:   64:	            return true;
    #####:   65:	        if(args.end() != find_if(args.begin(), args.end(), prefixMatcher(info))){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
    #####:   66:	           std::transform(args.begin(), args.end(), std::inserter(match,match.begin()),prefixCutter(info));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:   67:	           match.erase(std::string()); // get rid of empty string
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   68:	           return true;
        -:   69:	        }
    #####:   70:	        return false;
        -:   71:	    }
        -:   72:	public:
        -:   73:	    bool const shouldrunsuite;
function _ZN4cute10runner_aux14ArgvTestFilterC1ERKSsRKSt6vectorISsSaISsEE called 1 returned 100% blocks executed 80%
        1:   74:		ArgvTestFilter(std::string const &info, std::vector<std::string> const &args)
        1:   75:		:shouldrunsuite(shouldRunSuite(info,args)){}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
function _ZNK4cute10runner_aux14ArgvTestFilter9shouldRunERKSs called 2 returned 100% blocks executed 63%
        2:   76:	    bool shouldRun(const std::string & name) const
        -:   77:	    {
        2:   78:	        return match.empty() || match.count(name);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   79:	    }
        -:   80:	};
        -:   81:	} // namespace runner_aux
        -:   82:	template <typename Listener=null_listener>
function _ZN4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEED1Ev called 1 returned 100% blocks executed 100%
        1:   83:	struct runner{
call    0 returned 100%
        -:   84:		Listener &listener;
        -:   85:	    std::vector<std::string> args;
function _ZN4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEC1ERS5_iPKPKc called 1 returned 100% blocks executed 45%
        1:   86:		runner(Listener &l, int argc = 0, const char *const *argv = 0):listener(l){
call    0 returned 100%
call    1 never executed
        1:   87:	        if(needsFiltering(argc,argv)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   88:	        	args.reserve(argc-1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:	            std::remove_copy_if(argv + 1, argv + argc,back_inserter(args),std::logical_not<char const *>());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   90:	        }
        1:   91:		}
        -:   92:		bool operator()(const test & t) const
        -:   93:	    {
        -:   94:	        return runit(t);
        -:   95:	    }
        -:   96:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEclERKSt6vectorINS_4testESaIS8_EEPKc called 1 returned 100% blocks executed 69%
        1:   97:	    bool operator ()(suite const &s, const char *info = "") const
        -:   98:	    {
        1:   99:	    	runner_aux::ArgvTestFilter filter(info,args);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
call   12 never executed
        -:  100:
        1:  101:	        bool result = true;
        1:  102:	        if(filter.shouldrunsuite){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  103:	            listener.begin(s, info,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  104:	            		count_if(s.begin(),s.end(),boost_or_tr1::bind(&runner_aux::ArgvTestFilter::shouldRun,filter,boost_or_tr1::bind(&test::name,_1))));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 never executed
call   25 never executed
        2:  105:	            for(suite::const_iterator it = s.begin();it != s.end();++it){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 50%
branch 11 taken 50% (fallthrough)
        1:  106:	                if (filter.shouldRun(it->name())) result = this->runit(*it) && result;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 never executed
        -:  107:	            }
        1:  108:	            listener.end(s, info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  109:	        }
        -:  110:
        1:  111:	        return result;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
call    4 never executed
        -:  112:	    }
        -:  113:	private:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEE14needsFilteringEiPKPKc called 1 returned 100% blocks executed 67%
        1:  114:	    bool needsFiltering(int argc, const char *const *argv) const
        -:  115:	    {
        1:  116:	        return argc > 1 && argv ;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  117:	    }
        -:  118:
        -:  119:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEE5runitERKNS_4testE called 1 returned 100% blocks executed 15%
        1:  120:	    bool runit(const test & t) const
        -:  121:	    {
        -:  122:	        try {
        1:  123:	            listener.start(t);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  124:	            t();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  125:	            listener.success(t, "OK");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  126:	            return true;
    =====:  127:	        } catch(const cute::test_failure & e){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====:  128:	            listener.failure(t, e);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  129:	        } catch(const std::exception & exc){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====:  130:	            listener.error(t, demangle(exc.what()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    =====:  131:	        } catch(std::string & s){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====:  132:	            listener.error(t, s.c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  133:	        } catch(const char *&cs) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====:  134:				listener.error(t,cs);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  135:			} catch(...) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    =====:  136:				listener.error(t,"unknown exception thrown");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  137:			}
    =====:  138:			return false;
        -:  139:		}
        -:  140:	};
        -:  141:	template <typename Listener>
function _ZN4cute10makeRunnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEENS_6runnerIT_EERS7_iPKPKc called 1 returned 100% blocks executed 100%
        1:  142:	runner<Listener> makeRunner(Listener &s, int argc = 0, const char *const *argv = 0){
        1:  143:		return runner<Listener>(s,argc,argv);
call    0 returned 100%
        -:  144:	}
        -:  145:}
        -:  146:#endif /*CUTE_RUNNER_H_*/
