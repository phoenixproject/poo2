        -:    0:Source:D:/_BASE/_SISTEMAS/poo2/pacman/cute/cute_equals.h
        -:    0:Graph:Test.gcno
        -:    0:Data:Test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************************
        -:    2: * This file is part of CUTE.
        -:    3: *
        -:    4: * CUTE is free software: you can redistribute it and/or modify
        -:    5: * it under the terms of the GNU Lesser General Public License as published by
        -:    6: * the Free Software Foundation, either version 3 of the License, or
        -:    7: * (at your option) any later version.
        -:    8: *
        -:    9: * CUTE is distributed in the hope that it will be useful,
        -:   10: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12: * GNU Lesser General Public License for more details.
        -:   13: *
        -:   14: * You should have received a copy of the GNU Lesser General Public License
        -:   15: * along with CUTE.  If not, see <http://www.gnu.org/licenses/>.
        -:   16: *
        -:   17: * Copyright 2007-2011 Peter Sommerlad, Emanuel Graf
        -:   18: *
        -:   19: *********************************************************************************/
        -:   20:
        -:   21:#ifndef CUTE_EQUALS_H_
        -:   22:#define CUTE_EQUALS_H_
        -:   23:#include "cute_base.h"
        -:   24:#include "cute_diff_values.h"
        -:   25:#include "cute_determine_traits.h"
        -:   26:#include <cmath>
        -:   27:#include <limits>
        -:   28:#include <algorithm>
        -:   29:
        -:   30:
        -:   31:namespace cute {
        -:   32:	namespace cute_do_equals {
        -:   33:		// provide some template meta programming tricks to select "correct" comparison for floating point and integer types
        -:   34:		template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
        -:   35:		bool do_equals_floating_with_delta(ExpectedValue const &expected
        -:   36:				,ActualValue const &actual
        -:   37:				,DeltaValue const &delta) {
        -:   38:			return std::abs(delta)  >= std::abs(expected-actual);
        -:   39:		}
        -:   40:		template <typename ExpectedValue, typename ActualValue, bool select_non_floating_point_type>
function _ZN4cute14cute_do_equals18do_equals_floatingISsSsLb0EEEbRKT_RKT0_RKN5boost17integral_constantIbXT1_EEE called 1 returned 100% blocks executed 100%
        1:   41:		bool do_equals_floating(ExpectedValue const &expected
        -:   42:					,ActualValue const &actual,const impl_place_for_traits::integral_constant<bool, select_non_floating_point_type>&){
        1:   43:			return expected==actual; // normal case for most types uses operator==!
call    0 returned 100%
        -:   44:		}
        -:   45:		template <typename ExpectedValue, typename ActualValue>
        -:   46:		bool do_equals_floating(ExpectedValue const &expected
        -:   47:					,ActualValue const &actual,const impl_place_for_traits::true_type&){
        -:   48:			const ExpectedValue automatic_delta_masking_last_significant_digit=(10*std::numeric_limits<ExpectedValue>::epsilon())*expected;
        -:   49:			return do_equals_floating_with_delta(expected,actual,automatic_delta_masking_last_significant_digit);
        -:   50:		}
        -:   51:		// TMP-overload dispatch for floating points 2 bool params --> 4 overloads
        -:   52:		template <typename ExpectedValue, typename ActualValue, bool select_non_integral_type>
function _ZN4cute14cute_do_equals9do_equalsISsSsLb0EEEbRKT_RKT0_RKN5boost17integral_constantIbXT1_EEESC_ called 1 returned 100% blocks executed 100%
        1:   53:		bool do_equals(ExpectedValue const &expected
        -:   54:					,ActualValue const &actual
        -:   55:					,const impl_place_for_traits::integral_constant<bool, select_non_integral_type>&exp_is_integral
        -:   56:					,const impl_place_for_traits::integral_constant<bool, select_non_integral_type>&act_is_integral){
        1:   57:			return do_equals_floating(expected,actual,impl_place_for_traits::is_floating_point<ExpectedValue>());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   58:		}
        -:   59:		template <typename ExpectedValue, typename ActualValue, bool select_non_integral_type>
        -:   60:		bool do_equals(ExpectedValue const &expected
        -:   61:					,ActualValue const &actual
        -:   62:					,const impl_place_for_traits::false_type&,const impl_place_for_traits::false_type&){
        -:   63:			return do_equals_floating(expected,actual,impl_place_for_traits::is_floating_point<ActualValue>());
        -:   64:		}
        -:   65:		template <typename ExpectedValue, typename ActualValue, bool select_non_integral_type>
        -:   66:		bool do_equals(ExpectedValue const &expected
        -:   67:					,ActualValue const &actual
        -:   68:					,const impl_place_for_traits::integral_constant<bool, select_non_integral_type>&exp_is_integral
        -:   69:					,const impl_place_for_traits::true_type&){
        -:   70:			return do_equals_floating(expected,actual,impl_place_for_traits::is_floating_point<ExpectedValue>());
        -:   71:		}
        -:   72:		template <typename ExpectedValue, typename ActualValue, bool select_non_integral_type>
        -:   73:		bool do_equals(ExpectedValue const &expected
        -:   74:					,ActualValue const &actual
        -:   75:					,const impl_place_for_traits::true_type&,const impl_place_for_traits::integral_constant<bool, select_non_integral_type>&act_is_integral){
        -:   76:			return do_equals_floating(expected,actual,impl_place_for_traits::is_floating_point<ActualValue>());
        -:   77:		}
        -:   78:		// can I get rid of the following complexity by doing a do_equals_integral
        -:   79:		// parameterized by is_signed<ExpectedValue>==is_signed<ActualValue> or nofBits<A> < nofBits<B>
        -:   80:
        -:   81:
        -:   82:		// this is an optimization for avoiding if and sign-extend overhead if both int types are the same as below
        -:   83:		template <typename IntType>
        -:   84:		bool do_equals(IntType const &expected
        -:   85:					,IntType const &actual
        -:   86:					,const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:   87:			return expected==actual;
        -:   88:		}
        -:   89:		// bool cannot be made signed, therefore we need the following three overloads, also to avoid ambiguity
        -:   90:		template <typename IntType>
        -:   91:		bool do_equals(bool const &expected
        -:   92:					,IntType const &actual
        -:   93:					,const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:   94:			return expected== !(!actual); // warning from VS
        -:   95:		}
        -:   96:		template <typename IntType>
        -:   97:		bool do_equals(IntType const &expected
        -:   98:					,bool const &actual
        -:   99:					,const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:  100:			return !(!expected)==actual; // warning from VS
        -:  101:		}
        -:  102:		// do not forget the inline on a non-template overload!
        -:  103:		// this overload is needed to actually avoid ambiguity for comparing bool==bool as a best match
        -:  104:		inline bool do_equals(bool const &expected
        -:  105:				      ,bool const &actual
        -:  106:				      , const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:  107:			return expected==actual;
        -:  108:		}
        -:  109:		// overload for char const *, my test case failed because VC++ doesn't use string constant folding like g++/clang
        -:  110:		// a feature where we should do string comparison
        -:  111:		inline bool do_equals(char const *const &expected
        -:  112:				      ,char const *const &actual
        -:  113:				      , const impl_place_for_traits::false_type&,const impl_place_for_traits::false_type&){
        -:  114:			return std::string(expected) == actual;
        -:  115:		}
        -:  116:		template <typename IntegralType>
        -:  117:		size_t nof_bits(IntegralType const &){
        -:  118:			return std::numeric_limits<IntegralType>::digits;
        -:  119:		}
        -:  120:#if defined(USE_STD11)||defined(USE_TR1)
        -:  121:		template <typename ExpectedValue, typename ActualValue>
        -:  122:		bool do_equals_integral(ExpectedValue const &expected
        -:  123:				,ActualValue const &actual
        -:  124:				,const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:  125:			if (nof_bits(expected) < nof_bits(actual))
        -:  126:						return static_cast<ActualValue>(expected) == actual;
        -:  127:			else
        -:  128:						return expected == static_cast<ExpectedValue>(actual);
        -:  129:			return false;
        -:  130:		}
        -:  131:		template <typename ExpectedValue, typename ActualValue>
        -:  132:		bool do_equals_integral(ExpectedValue const &expected
        -:  133:				,ActualValue const &actual
        -:  134:				,const impl_place_for_traits::false_type&,const impl_place_for_traits::true_type&){
        -:  135://TODO complicated case, one signed one unsigned type. since it is about equality casting to the longer should work?
        -:  136:			if (sizeof(ExpectedValue) >	sizeof(ActualValue))
        -:  137:				return expected==static_cast<ExpectedValue>(actual);
        -:  138:			else
        -:  139:				return static_cast<ActualValue>(expected) == actual;
        -:  140:		}
        -:  141:		template <typename ExpectedValue, typename ActualValue>
        -:  142:		bool do_equals_integral(ExpectedValue const &expected
        -:  143:				,ActualValue const &actual
        -:  144:				,const impl_place_for_traits::true_type&,const impl_place_for_traits::false_type&){
        -:  145://TODO
        -:  146:			if (sizeof(ExpectedValue) < sizeof(ActualValue))
        -:  147:				return static_cast<ActualValue>(expected)==	actual;
        -:  148:			else
        -:  149:				return expected == static_cast<ExpectedValue>(actual);
        -:  150:		}
        -:  151:		template <typename ExpectedValue, typename ActualValue>
        -:  152:		bool do_equals_integral(ExpectedValue const &expected
        -:  153:				,ActualValue const &actual
        -:  154:				,const impl_place_for_traits::false_type&,const impl_place_for_traits::false_type&){
        -:  155:			if (nof_bits(expected) < nof_bits(actual))
        -:  156:						return static_cast<ActualValue>(expected) == actual;
        -:  157:			else
        -:  158:						return expected == static_cast<ExpectedValue>(actual);
        -:  159:			return false;
        -:  160:		}
        -:  161:#endif
        -:  162:		// will not work if either type is bool, therefore the overloads above.
        -:  163:		template <typename ExpectedValue, typename ActualValue>
        -:  164:		bool do_equals(ExpectedValue const &expected
        -:  165:					,ActualValue const &actual
        -:  166:					,const impl_place_for_traits::true_type&,const impl_place_for_traits::true_type&){
        -:  167:#if defined(USE_STD11) || defined(USE_TR1)
        -:  168:			return do_equals_integral(expected,actual,
        -:  169:					impl_place_for_traits::is_signed<ExpectedValue>()
        -:  170:					,impl_place_for_traits::is_signed<ActualValue>());
        -:  171:#else
        -:  172://TODO: replace the following code with a dispatcher on signed/unsigned
        -:  173:			typedef typename impl_place_for_traits::make_signed<ExpectedValue>::type ex_s;
        -:  174:			typedef typename impl_place_for_traits::make_signed<ActualValue>::type ac_s;
        -:  175:				// need to sign extend with the longer type, should work...
        -:  176:			    // might be done through more template meta prog tricks....but...
        -:  177:				if (nof_bits(expected) < nof_bits(actual))
        -:  178:					return static_cast<ac_s>(expected) == static_cast<ac_s>(actual);
        -:  179:				else
        -:  180:					return static_cast<ex_s>(expected) == static_cast<ex_s>(actual);
        -:  181:#endif
        -:  182:		}
        -:  183:	} // namespace equals_impl
        -:  184:	template <typename ExpectedValue, typename ActualValue>
function _ZN4cute12assert_equalISsSsEEvRKT_RKT0_RKSsPKci called 1 returned 100% blocks executed 26%
        1:  185:	void assert_equal(ExpectedValue const &expected
        -:  186:				,ActualValue const &actual
        -:  187:				,std::string const &msg
        -:  188:				,char const *file
        -:  189:				,int line) {
        -:  190:		// unfortunately there is no is_integral_but_not_bool_or_enum
        -:  191:		typedef typename impl_place_for_traits::is_integral<ExpectedValue> exp_integral;
        -:  192:		typedef typename impl_place_for_traits::is_integral<ActualValue> act_integral;
        1:  193:		if (cute_do_equals::do_equals(expected,actual,exp_integral(),act_integral()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        2:  194:			return;
    #####:  195:		throw test_failure(msg + diff_values(expected,actual),file,line);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  196:	}
        -:  197:
        -:  198:	template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
        -:  199:	void assert_equal_delta(ExpectedValue const &expected
        -:  200:				,ActualValue const &actual
        -:  201:				,DeltaValue const &delta
        -:  202:				,std::string const &msg
        -:  203:				,char const *file
        -:  204:				,int line) {
        -:  205:		if (cute_do_equals::do_equals_floating_with_delta(expected,actual,delta)) return;
        -:  206:		throw test_failure(msg + diff_values(expected,actual),file,line);
        -:  207:	}
        -:  208:
        -:  209:}
        -:  210:
        -:  211:#define ASSERT_EQUALM(msg,expected,actual) cute::assert_equal((expected),(actual),\
        -:  212:		CUTE_FUNCNAME_PREFIX+cute::cute_to_string::backslashQuoteTabNewline(msg),__FILE__,__LINE__)
        -:  213:#define ASSERT_EQUAL(expected,actual) ASSERT_EQUALM(#expected " == " #actual, (expected),(actual))
        -:  214:#define ASSERT_EQUAL_DELTAM(msg,expected,actual,delta) cute::assert_equal_delta((expected),(actual),(delta),\
        -:  215:		CUTE_FUNCNAME_PREFIX+cute::cute_to_string::backslashQuoteTabNewline(msg),__FILE__,__LINE__)
        -:  216:#define ASSERT_EQUAL_DELTA(expected,actual,delta) ASSERT_EQUAL_DELTAM(#expected " == " #actual " with error " #delta  ,(expected),(actual),(delta))
        -:  217:#endif /*CUTE_EQUALS_H_*/
